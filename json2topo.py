#!/usr/bin/env python3

import os
import pathlib
import argparse
import json

def write_topo(topo_file, topo_json):
    topo_file.write("# generated by json2topo.py\n\n")

    # router
    # i'm not actually sure which are required, being lenient here
    router_req_fields = [ "node" ]
    router_opt_fields = [ "comment", "y", "x", "mpi-partition" ]

    topo_file.write("router\n")
    topo_file.write("# ")
    topo_file.write('\t'.join(router_req_fields + router_opt_fields))
    topo_file.write('\n')
    for node in topo_json["router"]:
        for field in router_req_fields:
            topo_file.write(node[field])
            topo_file.write('\t')

        for field in router_opt_fields:
            if field not in node:
                break

            topo_file.write(node[field])
            topo_file.write('\t')

        topo_file.write('\n')

    # link
    # these are correct
    link_req_fields = [ "from", "to" ]
    link_opt_fields = [ "capacity", "metric", "delay", "queue" ]

    topo_file.write("\nlink\n")
    topo_file.write("# ")
    topo_file.write('\t'.join(link_req_fields + link_opt_fields))
    topo_file.write('\n')
    for node in topo_json["link"]:
        for field in link_req_fields:
            topo_file.write(node[field])
            topo_file.write('\t')

        for field in link_opt_fields:
            if field not in node:
                break

            topo_file.write(node[field])
            topo_file.write('\t')

        topo_file.write('\n')


def main():
    parser = argparse.ArgumentParser("json2topo")
    parser.add_argument("file", nargs='+', help="File(s) to convert")
    parser.add_argument('-o', '--output', type=pathlib.Path, default=None, help="output file for converting a single file")
    parser.add_argument('-O', '--output-dir', type=pathlib.Path, default=None, help="output directory for converting multiple files")
    args = parser.parse_args()

    if len(args.file) > 1 and args.output:
        raise ValueError("Option '--output' does not support converting multiple files")

    for json_name in args.file:
        topo_path = ""

        if args.output:
            topo_path = args.output
        else:
            topo_path = 'topo-' + os.path.splitext(json_name)[0] + '.txt'

        if args.output_dir:
            topo_path = os.path.join(args.output_dir, topo_path)

        with open(topo_path, "w") as topo_file, open(json_name, "r") as json_file:
            topo_json = json.load(json_file)
            write_topo(topo_file, topo_json)


if __name__ == '__main__':
    main()
